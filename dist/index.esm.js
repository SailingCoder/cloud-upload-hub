import o from"fs";import t from"path";import n from"minimist";import r from"dayjs";var e={validateConfig:function(o,t,n=""){const r=t.filter((t=>!o[t]));if(r.length>0)throw Error(`缺少${n}配置: 请检查配置文件中的 ${r.join(", ")} 是否存在。`)},isPromise:function(o){return!(!o||"function"!=typeof o.then)}};function i(o){const n=process.cwd();return t.resolve(n,o)}var s={getUploadFiles:function n(r){let e=[];return o.statSync(r).isFile()?[r]:(o.readdirSync(r).forEach((i=>{const s=t.join(r,i);o.statSync(s).isDirectory()?e=e.concat(n(s)):e.push(s)})),e)},separatelastFile:function(o,t){let n=null;const r=o.filter((o=>{const r=o.endsWith(t);return r&&(n=o),!r}));return[n,r]},loadConfig:function(t){let n={};t=i(t);try{n=JSON.parse(o.readFileSync(t,"utf-8"))}catch(o){throw Error(`${t} 文件加载失败: ${o.message}`)}return n},resolveConfigPath:i,displayHelp:function(){const n=t.join(__dirname,"../../package.json"),r=JSON.parse(o.readFileSync(n,"utf-8"));console.log(`\n      cloud-upload-hub 本地上传工具，支持 OSS、COS 上传。\n      \n      稳定版本：\n      cloud-upload-hub@${r.version}\n      \n      使用方法：\n      cloud-upload-hub --source=<源目录> --target=<目标目录> --ossCredentials=<oss配置文件> --cosCredentials=<cos配置文件>\n      \n      参数说明：\n      --ossCredentials          指定 OSS 配置文件路径。\n      --cosCredentials          指定 COS 配置文件路径。\n      --source         指定上传源文件夹路径。\n      --target           指定上传目标路径。\n      --retryLimit      指定最大重试次数（默认为5）。\n      --maxConcurrent        指定并发上传的数量限制（默认为10）。\n      --lastFile           最后一个上传的文件（默认为 index.html）。\n      --headers            指定自定义请求头信息（JSON格式）。\n      --uploaderModules  自定义配置文件路径（JSON格式数组）。\n      --ossHeaders         指定自定义OSS请求头信息（JSON格式）。\n      --cosHeaders         指定自定义COS请求头信息（JSON格式）。\n      --help               显示帮助信息。\n    `)}};function a(o){throw Error('Could not dynamically require "'+o+'". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.')}var l={runConcurrentLimit:async function(o,t){const n=[];for(;o.length>0;){for(;t>n.length&&o.length>0;){const t=o.shift()().finally((()=>n.splice(n.indexOf(t),1)));n.push(t)}await Promise.race(n)}await Promise.all(n)},getArgv:function(){return n(process.argv.slice(2))}};const{getArgv:u}=l;let c={};var f={loadDefaultConfig:function(){const n=u(),r=t.resolve(process.cwd(),"uploader.config.js");if(o.existsSync(r)){const{defineConfig:o}=a(r);if("function"!=typeof o)throw Error("uploader.config.js 需要导出一个 defineConfig 函数");c=o({mode:n.mode})}else if(n.config){const o=resolveConfigPath(n.config),{defineConfig:t}=a(o);if("function"!=typeof t)throw Error("配置文件需要导出一个 defineConfig 函数");c=t({mode:n.mode})}else c={...n,uploaderModules:JSON.parse((null==n?void 0:n.uploaderModules)||"[]")};return c.retryLimit=c.retryLimit||5,c.maxConcurrent=c.maxConcurrent||10,c.lastFile=c.lastFile||"index.html",c},getConfigData:function(){return c}};const{validateConfig:d,isPromise:h}=e,{loadConfig:p}=s,{getConfigData:m}=f,g=[];var y={registerUploader:function(o,t){const n=m(),r=null==t?void 0:t.configName,e=null==t?void 0:t.configRequiredFields,i=null==t?void 0:t.headerName,s=null==t?void 0:t.type;try{const t=n[r];if(!t)return;const a=function(o){if("function"==typeof o){const t=o();if(h(t))throw Error("Uploader config function must be synchronous");return t||{}}return"object"==typeof o?o:"string"==typeof o?p(o):{}}(t),l=n[i]?JSON.parse(n[i]):{};null!=e&&e.length&&d(a,e,s);const u=new o({...{source:n.source,target:n.target,retryLimit:Number(n.retryLimit)||5,maxConcurrent:Number(n.maxConcurrent)||10,headers:l,type:s,format:n.format},...a});g.push(u)}catch(o){throw Error(`上传器注册失败: ${s}, ${o.message}`)}},uploaders:g};var C={formatTime:function(o="YYYY-MM-DD HH:mm:ss",t){return(t?r(t):r()).format(o)}};const{runConcurrentLimit:$}=l,{formatTime:v}=C;var S={BaseUploader:class{constructor(o){this.source=o.source,this.target=o.target,this.retryLimit=o.retryLimit||5,this.maxConcurrent=o.maxConcurrent||10,this.successTotal=0,this.fileTotal=o.fileTotal||0,this.type=o.type,this.format=o.format||""}async uploadFile(o){const t=o.map((o=>()=>this.uploadSingleFileWithRetry(o)));await $(t,this.maxConcurrent)}setFileTotal(o){this.fileTotal=o}getUploaderType(){return this.type}async uploadSingleFileWithRetry(o,n=0){try{const r=t.join(this.target,t.relative(this.source,o)),e=await this.uploadSingleFile(o,r);if(null==e||!e.success){const o=[];throw null!=e&&e.status&&o.push("status: "+e.status),null!=e&&e.message&&o.push(""+e.message),Error(o.length>0?o.join(", "):"未知错误")}{this.successTotal++;const t=null!=e&&e.message?null==e?void 0:e.message:`${o} -> ${r}`,i=this.format?v(this.format):(new Date).toISOString();console.log(`[${this.type}][OK][${this.successTotal}/${this.fileTotal}][${i}]${n?`(${n+1})`:""}: ${t}`)}}catch(t){const r=this.format?v(this.format):(new Date).toISOString();if(n>=this.retryLimit)throw console.error(`[${this.type}][ERROR][${r}]: 上传失败，文件: ${o}, message：${t.message}`),t;console.warn(`[${this.type}][WARN][${r}]: 上传异常，正在重试 #${n+1}，文件: ${o}`),await this.uploadSingleFileWithRetry(o,n+1)}}async uploadSingleFile(o,t){throw Error("uploadSingleFile 方法未实现")}}};const{registerUploader:w}=y,{BaseUploader:O}=S,{loadConfig:N}=s,{formatTime:E}=C;var F={registerUploader:w,BaseUploader:O,loadJsonFileSync:N,formatTime:E};export{F as default};
//# sourceMappingURL=index.esm.js.map
