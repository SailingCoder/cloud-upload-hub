"use strict";var t=require("fs"),o=require("path"),n=require("minimist"),e=require("dayjs");function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var i=r(t),s=r(o),a=r(n),l=r(e);var u={validateConfig:function(t,o,n=""){const e=o.filter((o=>!t[o]));if(e.length>0)throw Error(`缺少${n}配置: 请检查配置文件中的 ${e.join(", ")} 是否存在。`)},isPromise:function(t){return!(!t||"function"!=typeof t.then)}};function c(t){const o=process.cwd();return s.default.resolve(o,t)}var f={getUploadFiles:function t(o){let n=[];return i.default.statSync(o).isFile()?[o]:(i.default.readdirSync(o).forEach((e=>{const r=s.default.join(o,e);i.default.statSync(r).isDirectory()?n=n.concat(t(r)):n.push(r)})),n)},separatelastFile:function(t,o){let n=null;const e=t.filter((t=>{const e=t.endsWith(o);return e&&(n=t),!e}));return[n,e]},loadConfig:function(t){let o={};t=c(t);try{o=JSON.parse(i.default.readFileSync(t,"utf-8"))}catch(o){throw Error(`${t} 文件加载失败: ${o.message}`)}return o},resolveConfigPath:c,displayHelp:function(){const t=s.default.join(__dirname,"../../package.json"),o=JSON.parse(i.default.readFileSync(t,"utf-8"));console.log(`\n      cloud-upload-hub 本地上传工具，支持 OSS、COS 上传。\n      \n      稳定版本：\n      cloud-upload-hub@${o.version}\n      \n      使用方法：\n      cloud-upload-hub --source=<源目录> --target=<目标目录> --ossCredentials=<oss配置文件> --cosCredentials=<cos配置文件>\n      \n      参数说明：\n      --ossCredentials          指定 OSS 配置文件路径。\n      --cosCredentials          指定 COS 配置文件路径。\n      --source         指定上传源文件夹路径。\n      --target           指定上传目标路径。\n      --retryLimit      指定最大重试次数（默认为5）。\n      --maxConcurrent        指定并发上传的数量限制（默认为10）。\n      --lastFile           最后一个上传的文件（默认为 index.html）。\n      --headers            指定自定义请求头信息（JSON格式）。\n      --uploaderModules  自定义配置文件路径（JSON格式数组）。\n      --ossHeaders         指定自定义OSS请求头信息（JSON格式）。\n      --cosHeaders         指定自定义COS请求头信息（JSON格式）。\n      --help               显示帮助信息。\n    `)}};function d(t){throw Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.')}var h={runConcurrentLimit:async function(t,o){const n=[];for(;t.length>0;){for(;o>n.length&&t.length>0;){const o=t.shift()().finally((()=>n.splice(n.indexOf(o),1)));n.push(o)}await Promise.race(n)}await Promise.all(n)},getArgv:function(){return a.default(process.argv.slice(2))}};const{getArgv:p}=h;let g={};var m={loadDefaultConfig:function(){const t=p(),o=s.default.resolve(process.cwd(),"uploader.config.js");if(i.default.existsSync(o)){const{defineConfig:n}=d(o);if("function"!=typeof n)throw Error("uploader.config.js 需要导出一个 defineConfig 函数");g=n({mode:t.mode})}else if(t.config){const o=resolveConfigPath(t.config),{defineConfig:n}=d(o);if("function"!=typeof n)throw Error("配置文件需要导出一个 defineConfig 函数");g=n({mode:t.mode})}else g={...t,uploaderModules:JSON.parse((null==t?void 0:t.uploaderModules)||"[]")};return g.retryLimit=g.retryLimit||5,g.maxConcurrent=g.maxConcurrent||10,g.lastFile=g.lastFile||"index.html",g},getConfigData:function(){return g}};const{validateConfig:y,isPromise:C}=u,{loadConfig:$}=f,{getConfigData:v}=m,S=[];var w={registerUploader:function(t,o){const n=v(),e=null==o?void 0:o.configName,r=null==o?void 0:o.configRequiredFields,i=null==o?void 0:o.headerName,s=null==o?void 0:o.type;try{const o=n[e];if(!o)return;const a=function(t){if("function"==typeof t){const o=t();if(C(o))throw Error("Uploader config function must be synchronous");return o||{}}return"object"==typeof t?t:"string"==typeof t?$(t):{}}(o),l=n[i]?JSON.parse(n[i]):{};null!=r&&r.length&&y(a,r,s);const u=new t({...{source:n.source,target:n.target,retryLimit:Number(n.retryLimit)||5,maxConcurrent:Number(n.maxConcurrent)||10,headers:l,type:s,format:n.format},...a});S.push(u)}catch(t){throw Error(`上传器注册失败: ${s}, ${t.message}`)}},uploaders:S};var O={formatTime:function(t="YYYY-MM-DD HH:mm:ss",o){return(o?l.default(o):l.default()).format(t)}};const{runConcurrentLimit:N}=h,{formatTime:E}=O;var b={BaseUploader:class{constructor(t){this.source=t.source,this.target=t.target,this.retryLimit=t.retryLimit||5,this.maxConcurrent=t.maxConcurrent||10,this.successTotal=0,this.fileTotal=t.fileTotal||0,this.type=t.type,this.format=t.format||""}async uploadFile(t){const o=t.map((t=>()=>this.uploadSingleFileWithRetry(t)));await N(o,this.maxConcurrent)}setFileTotal(t){this.fileTotal=t}getUploaderType(){return this.type}async uploadSingleFileWithRetry(t,o=0){try{const n=s.default.join(this.target,s.default.relative(this.source,t)),e=await this.uploadSingleFile(t,n);if(null==e||!e.success){const t=[];throw null!=e&&e.status&&t.push("status: "+e.status),null!=e&&e.message&&t.push(""+e.message),Error(t.length>0?t.join(", "):"未知错误")}{this.successTotal++;const r=null!=e&&e.message?null==e?void 0:e.message:`${t} -> ${n}`,i=this.format?E(this.format):(new Date).toISOString();console.log(`[${this.type}][OK][${this.successTotal}/${this.fileTotal}][${i}]${o?`(${o+1})`:""}: ${r}`)}}catch(n){const e=this.format?E(this.format):(new Date).toISOString();if(o>=this.retryLimit)throw console.error(`[${this.type}][ERROR][${e}]: 上传失败，文件: ${t}, message：${n.message}`),n;console.warn(`[${this.type}][WARN][${e}]: 上传异常，正在重试 #${o+1}，文件: ${t}`),await this.uploadSingleFileWithRetry(t,o+1)}}async uploadSingleFile(t,o){throw Error("uploadSingleFile 方法未实现")}}};const{registerUploader:F}=w,{BaseUploader:J}=b,{loadConfig:U}=f,{formatTime:j}=O;module.exports={registerUploader:F,BaseUploader:J,loadJsonFileSync:U,formatTime:j};
//# sourceMappingURL=index.cjs.js.map
