{"version":3,"file":"index.cjs.js","sources":["../src/utils/validate.js","../src/utils/file.js","../src/utils/process.js","../src/store/config.js","../src/upload/uploaderRegistry.js","../src/utils/time.js","../src/upload/baseUploader.js","../src/index.js"],"sourcesContent":["function validateConfig(config, requiredKeys, type='') {\n    const missingKeys = requiredKeys.filter(key => !config[key]);\n    if (missingKeys.length > 0) {\n        throw new Error(`缺少${type}配置: 请检查配置文件中的 ${missingKeys.join(', ')} 是否存在。`);\n    }\n}\n\nfunction isPromise(value) {\n    return Boolean(value && typeof value.then === 'function');\n}\n\nmodule.exports = { validateConfig, isPromise };","const fs = require(\"fs\");\nconst path = require(\"path\");\n\n// 获取所有待上传的文件\nfunction getUploadFiles(dir) {\n  let fileList = [];\n\n  const stat = fs.statSync(dir);\n  // 如果是文件，直接添加到列表\n  if (stat.isFile()) {\n    return [dir]; // 返回包含该文件的数组\n  }\n\n  const files = fs.readdirSync(dir);\n  files.forEach((file) => {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n    if (stat.isDirectory()) {\n      fileList = fileList.concat(getUploadFiles(filePath));\n    } else {\n      fileList.push(filePath);\n    }\n  });\n  return fileList;\n}\n\n// 分离出优先上传的文件\nfunction separatelastFile(files, lastFileName) {\n  let lastFile = null;\n  const otherFiles = files.filter((file) => {\n    const isPriority = file.endsWith(lastFileName);\n    if (isPriority) {\n      lastFile = file;\n    }\n    return !isPriority;\n  });\n  return [lastFile, otherFiles];\n}\n\nfunction loadConfig(configPath) {\n  let config = {};\n  configPath = resolveConfigPath(configPath);\n  try {\n    config = JSON.parse(fs.readFileSync(configPath, \"utf-8\"));\n  } catch (error) {\n    throw new Error(`${configPath} 文件加载失败: ${error.message}`); // 直接抛出错误\n  }\n  return config;\n}\n\nfunction resolveConfigPath(relativePath) {\n  const cwd = process.cwd(); // 获取当前工作目录\n  return path.resolve(cwd, relativePath); // 将相对路径解析为绝对路径\n}\n\n// 提取的帮助信息函数\nfunction displayHelp() {\n  // 读取 package.json 文件\n  const packageJsonPath = path.join(__dirname, \"../../package.json\"); // 根据实际路径调整\n  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf-8\"));\n\n  // 获取稳定版本号\n  const stableVersion = packageJson.version;\n\n  console.log(`\n      cloud-upload-hub 本地上传工具，支持 OSS、COS 上传。\n      \n      稳定版本：\n      cloud-upload-hub@${stableVersion}\n      \n      使用方法：\n      cloud-upload-hub --source=<源目录> --target=<目标目录> --ossCredentials=<oss配置文件> --cosCredentials=<cos配置文件>\n      \n      参数说明：\n      --ossCredentials          指定 OSS 配置文件路径。\n      --cosCredentials          指定 COS 配置文件路径。\n      --source         指定上传源文件夹路径。\n      --target           指定上传目标路径。\n      --retryLimit      指定最大重试次数（默认为5）。\n      --maxConcurrent        指定并发上传的数量限制（默认为10）。\n      --lastFile           最后一个上传的文件（默认为 index.html）。\n      --headers            指定自定义请求头信息（JSON格式）。\n      --uploaderModules  自定义配置文件路径（JSON格式数组）。\n      --ossHeaders         指定自定义OSS请求头信息（JSON格式）。\n      --cosHeaders         指定自定义COS请求头信息（JSON格式）。\n      --help               显示帮助信息。\n    `);\n}\n\nmodule.exports = {\n  getUploadFiles,\n  separatelastFile,\n  loadConfig,\n  resolveConfigPath,\n  displayHelp,\n};\ndisplayHelp;\n","const minimist = require('minimist');\n\n// 并发控制的核心逻辑\nasync function runConcurrentLimit(tasks, limit) {\n    const taskQueue = [];\n    while (tasks.length > 0) {\n        while (taskQueue.length < limit && tasks.length > 0) {\n            const task = tasks.shift();\n            const taskPromise = task().finally(() => taskQueue.splice(taskQueue.indexOf(taskPromise), 1));\n            taskQueue.push(taskPromise);\n        }\n        await Promise.race(taskQueue); // 等待最先完成的任务\n    }\n    await Promise.all(taskQueue); // 确保剩余的任务都完成\n}\n\n// 获取命令行参数\nfunction getArgv() {\n    return minimist(process.argv.slice(2));\n}\n\nmodule.exports = { runConcurrentLimit, getArgv };","// config/loadConfig.js\nconst fs = require('fs');\nconst path = require('path');\nconst { getArgv } = require('../utils/process');\n\nlet configData = {}; // 存储配置数据\n\nfunction loadDefaultConfig() {\n  const argv = getArgv();\n  const configFilePath = path.resolve(process.cwd(), 'uploader.config.js');\n\n  // 检查是否有配置文件\n  if (fs.existsSync(configFilePath)) {\n    // 如果根目录下有 uploader.config.js 文件，优先使用\n    const { defineConfig } = require(configFilePath);\n    if (typeof defineConfig !== 'function') {\n      throw new Error('uploader.config.js 需要导出一个 defineConfig 函数');\n    }\n    configData = defineConfig({ mode: argv.mode });\n  } else if (argv.config) {\n    // 如果命令行指定了配置文件路径，使用指定的路径\n    const configPath = resolveConfigPath(argv.config);\n    const { defineConfig } = require(configPath);\n    if (typeof defineConfig !== 'function') {\n      throw new Error('配置文件需要导出一个 defineConfig 函数');\n    }\n    configData = defineConfig({ mode: argv.mode });\n  } else {\n    // 没有配置文件时，使用命令行参数中的值\n    configData = {\n      ...argv,\n      uploaderModules: JSON.parse(argv?.uploaderModules || '[]'),\n    };\n  }\n\n  // 默认赋值\n  configData.retryLimit = configData.retryLimit || 5;\n  configData.maxConcurrent = configData.maxConcurrent || 10;\n  configData.lastFile = configData.lastFile || \"index.html\";\n  \n  return configData; // 返回配置数据\n}\n\nfunction getConfigData() {\n  return configData;\n}\n\nmodule.exports = {\n    loadDefaultConfig,\n    getConfigData\n};\n","// uploaderRegistry.js 用户注册上传器的接口\nconst { validateConfig, isPromise } = require(\"../utils/validate\");\nconst { loadConfig } = require(\"../utils/file\");\nconst { getConfigData } = require(\"../store/config\");\n\nconst uploaders = [];\n\n// 获取上传器配置数据，支持传递 ”函数、对象、字符串“ 3 种类型\nfunction getUploaderConfigData(uploaderConfig) {\n  if (typeof uploaderConfig === 'function') {\n    const result = uploaderConfig();\n    if (isPromise(result)) {\n      throw new Error(\"Uploader config function must be synchronous\");\n    }\n    return result || {};\n  } else if (typeof uploaderConfig === 'object') {\n    return uploaderConfig;\n  } else if (typeof uploaderConfig === 'string') {\n    return loadConfig(uploaderConfig);\n  }\n  return {};\n}\n\n// 注册上传器\nfunction registerUploader(UploaderClass, options) {\n  const configData = getConfigData();\n\n  const configName = options?.configName; // 配置文件名\n  const configRequiredFields = options?.configRequiredFields; // 配置文件必填字段\n  const headerName = options?.headerName; // 头部配置名\n  const type = options?.type; // 上传器类型\n  try {\n    const uploaderConfig = configData[configName]; // 上传器配置名，可以为函数、对象、字符串\n    if (!uploaderConfig) {\n      // console.warn(`${type}上传器配置不存在: ${configName}`);\n      return\n    }\n\n    const uploaderConfigData = getUploaderConfigData(uploaderConfig);\n\n    const headers = configData[headerName] ? JSON.parse(configData[headerName]) : {};\n\n    if (configRequiredFields?.length) { // 配置文件必填字段\n      validateConfig(uploaderConfigData, configRequiredFields, type);\n    }\n\n    const defaultConfig = {\n      source: configData.source,\n      target: configData.target,\n      retryLimit: Number(configData.retryLimit) || 5,\n      maxConcurrent: Number(configData.maxConcurrent) || 10,\n      headers,\n      type,\n      format: configData.format,\n    };\n\n    const uploaderInstance = new UploaderClass({\n      ...defaultConfig,\n      ...uploaderConfigData,\n    });\n\n    uploaders.push(uploaderInstance);\n  } catch (error) {\n    throw new Error(`上传器注册失败: ${type}, ${error.message}`);\n  }\n}\n\nmodule.exports = { registerUploader, uploaders };\n","const dayjs = require('dayjs');\n/**\n * 格式化日期时间\n * @param {string} [format='YYYY-MM-DD HH:mm:ss'] - 时间格式字符串。\n * @param {Date|string} [date] - 要格式化的日期对象或字符串。如果不传入，则使用当前时间。\n * @returns {string} 格式化后的时间字符串。\n */\nfunction formatTime(format = 'YYYY-MM-DD HH:mm:ss', date) {\n    // 如果 date 未传入，则使用当前时间\n    const targetDate = date ? dayjs(date) : dayjs();\n    return targetDate.format(format);\n}\n\nmodule.exports = { formatTime };","const path = require('path')\nconst { runConcurrentLimit } = require('../utils/process')\nconst { formatTime } = require('../utils/time')\n\nclass BaseUploader {\n  constructor(options) {\n    this.source = options.source;\n    this.target = options.target;\n    this.retryLimit = options.retryLimit || 5;\n    this.maxConcurrent = options.maxConcurrent || 10; // 并发上传数量控制\n    this.successTotal = 0;\n    this.fileTotal = options.fileTotal || 0;\n    this.type = options.type;\n    this.format = options.format || '';\n  }\n\n  async uploadFile(files) {\n    const tasks = files.map((file) => () => this.uploadSingleFileWithRetry(file));\n    await runConcurrentLimit(tasks, this.maxConcurrent); // 控制并发上传\n  }\n\n  setFileTotal(total) {\n    this.fileTotal = total;\n  }\n  \n  getUploaderType() {\n    return this.type\n  }\n\n  // 上传单个文件，并增加重试机制\n  async uploadSingleFileWithRetry(file, retryCount = 0) {\n    try {\n      const target = path.join(this.target, path.relative(this.source, file));\n      const result = await this.uploadSingleFile(file, target);\n      if (result?.success) {\n        this.successTotal++;\n        const msg = result?.message ? result?.message : `${file} -> ${target}`;\n        const createTime = this.format ? formatTime(this.format) : new Date().toISOString();\n        console.log(`[${this.type}][OK][${this.successTotal}/${this.fileTotal}][${createTime}]${retryCount ? `(${retryCount + 1})`: ''}: ${msg}`)\n      } else {\n        const messages = [];\n        if (result?.status) {\n          messages.push(`status: ${result.status}`);\n        }\n        if (result?.message) {\n          messages.push(`${result.message}`);\n        }\n        throw new Error(messages.length > 0 ? messages.join(', ') : '未知错误');\n      }\n    } catch (error) {\n      const createTime = this.format ? formatTime(this.format) : new Date().toISOString();\n      if (retryCount < this.retryLimit) {\n        console.warn(`[${this.type}][WARN][${createTime}]: 上传异常，正在重试 #${retryCount + 1}，文件: ${file}`);\n        // console.warn(`[OSS][WARN]: 上传 OSS 异常，正在重试 ${file}，重试次数：${retryCount + 1}`);\n        await this.uploadSingleFileWithRetry(file, retryCount + 1);\n      } else {\n        console.error(`[${this.type}][ERROR][${createTime}]: 上传失败，文件: ${file}, message：${error.message}`);\n        throw error;\n      }\n    }\n  }\n\n  // 实际的文件上传函数\n  async uploadSingleFile(file, target) {\n    throw new Error(\"uploadSingleFile 方法未实现\"); // 子类需要实现该方法\n  }\n}\n\nmodule.exports = { BaseUploader }\n","const { registerUploader } = require('./upload/uploaderRegistry');\nconst { BaseUploader } = require('./upload/baseUploader');\nconst { loadConfig } = require('./utils/file');\nconst { formatTime } = require('./utils/time');\n\nmodule.exports = {\n    registerUploader,\n    BaseUploader,\n    loadJsonFileSync: loadConfig,\n    formatTime\n};\n\n"],"names":["validate","config","requiredKeys","type","missingKeys","filter","key","length","Error","join","isPromise","value","then","resolveConfigPath","relativePath","cwd","process","path","resolve","file","getUploadFiles","dir","fileList","fs","statSync","isFile","readdirSync","forEach","filePath","isDirectory","concat","push","separatelastFile","files","lastFileName","lastFile","otherFiles","isPriority","endsWith","configPath","JSON","parse","readFileSync","error","message","displayHelp","packageJsonPath","__dirname","packageJson","console","log","version","process_1","async","tasks","limit","taskQueue","taskPromise","shift","task","finally","splice","indexOf","Promise","race","all","getArgv","minimist","argv","slice","require$$0","configData","loadDefaultConfig","configFilePath","existsSync","defineConfig","require","mode","uploaderModules","retryLimit","maxConcurrent","getConfigData","validateConfig","loadConfig","require$$1","require$$2","uploaders","uploaderRegistry","UploaderClass","options","configName","configRequiredFields","headerName","uploaderConfig","uploaderConfigData","result","getUploaderConfigData","headers","uploaderInstance","source","target","Number","format","time","formatTime","date","dayjs","runConcurrentLimit","baseUploader","BaseUploader","constructor","this","successTotal","fileTotal","uploadFile","map","uploadSingleFileWithRetry","setFileTotal","total","getUploaderType","retryCount","relative","uploadSingleFile","success","messages","status","msg","createTime","Date","toISOString","warn","registerUploader","require$$3","loadJsonFileSync"],"mappings":"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"}